<?xml version="1.0" encoding="utf-8" ?>
<app:BasePage
    x:Class="MAUIsland.TimePickerPage"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:app="clr-namespace:MAUIsland"
    Title="Time Picker"
    Padding="10"
    x:DataType="app:TimePickerPageViewModel"
    BackgroundColor="Transparent">
    <app:BasePage.ToolbarItems>
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.GitHubUrl}"
            IconImageSource="githublogo.png"
            Text="Source code" />
        <ToolbarItem
            Command="{x:Binding OpenUrlCommand}"
            CommandParameter="{x:Binding ControlInformation.DocumentUrl}"
            IconImageSource="microsoft.png"
            Text="Original Document" />
    </app:BasePage.ToolbarItems>

    <app:BasePage.Resources>
        <app:TimeOnyToTimeSpanConverter x:Key="TimeOnyToTimeSpanConverter" />

        <x:String x:Key="PropertiesListHeader">
            TimePicker defines the following properties:
        </x:String>

        <x:String x:Key="TimeOnlyDataTypeInfo">
            The TimeOnly struct is used to represent a time that is independent of the date. For example, imagine creating an alarm clock app that lets the user create a reoccurring alarm. In this situation, we want to store the time of day when the alarm should sound, but the date is irrelevant.
        </x:String>

        <x:String x:Key="TimeOnlyDataTypeInfo1">
            The TimeOnly type has several constructor overloads. The more common ones that I expect most developers will use allow us to create a date accepting either the hour and minute for the time, the hour, minute and second, or the hour, minute, second and millisecond.
        </x:String>

        <x:Array x:Key="PropertyItemsSource" Type="{x:Type x:String}">
            <x:String>
                <![CDATA[
                <strong style="color:blue">Time</strong>, of type <strong style="color:blue">TimeSpan</strong>, the selected time, which defaults to a <strong style="color:blue">TimeSpan</strong> of 0. The <strong style="color:blue">TimeSpan</strong> type indicates a duration of time since midnight.
                    ]]>
            </x:String>

            <x:String>
                <![CDATA[
                <strong style="color:blue">Format</strong>, of type <strong style="color:blue">string</strong>, a standard or custom .NET formatting string, which defaults to "t", the short time pattern.
                    ]]>
            </x:String>

            <x:String>
                <![CDATA[
                <strong style="color:blue">TextColor</strong>, of type <strong style="color:blue">Color</strong>, the color used to display the selected time.
                    ]]>
            </x:String>

            <x:String>
                <![CDATA[
                <strong style="color:blue">FontAttributes</strong>, of type <strong style="color:blue">FontAttributes</strong>, which defaults to FontAtributes.None.
                    ]]>
            </x:String>

            <x:String>
                <![CDATA[
                <strong style="color:blue">FontFamily</strong>, of type <strong style="color:blue">string</strong>, which defaults to null.
                    ]]>
            </x:String>

            <x:String>
                <![CDATA[
                <strong style="color:blue">FontSize</strong>, of type <strong style="color:blue">double</strong>, which defaults to -1.0.
                    ]]>
            </x:String>

            <x:String>
                <![CDATA[
                <strong style="color:blue">CharacterSpacing</strong>, of type <strong style="color:blue">double</strong>, is the spacing between characters of the TimePicker text.
                    ]]>
            </x:String>
        </x:Array>
    </app:BasePage.Resources>

    <ScrollView>
        <VerticalStackLayout Spacing="20">
            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <Label Text="{x:Binding ControlInformation.ControlDetail}" />
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <CollectionView
                    Header="{x:StaticResource PropertiesListHeader}"
                    ItemsSource="{x:StaticResource PropertyItemsSource}"
                    Style="{x:StaticResource PropertiesListStyle}" />
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="Simple date picker" />
                    <TimePicker Time="4:15:26" />
                    <app:SourceCodeExpander Code="{x:Binding SimpleTimePickerXamlCode}" />
                    <Label Text="You can also you use C# to create it" />
                    <app:SourceCodeExpander Code="{x:Binding SimpleTimePickerCSharpCode}" CodeType="CSharp" />
                </VerticalStackLayout>
            </Frame>

            <Frame Style="{x:StaticResource DocumentContentFrameStyle}">
                <VerticalStackLayout Spacing="10">
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="TIMEONLY in .NET 6" />
                    <Label Text="{x:StaticResource TimeOnlyDataTypeInfo}" />
                    <Label Text="{x:StaticResource TimeOnlyDataTypeInfo1}" />
                    <app:SourceCodeExpander Code="{x:Binding TimeOnlyContrutorsExampleCSharpCode}" CodeType="CSharp" />
                    <Label Text="For example, to represent 10:30am in the morning, we can create the following TimeOnly instance." />
                    <app:SourceCodeExpander Code="{x:Binding TimeOnlyExampleCSharpCode}" CodeType="CSharp" />
                    <HorizontalStackLayout Spacing="10">
                        <TimePicker Time="{x:Binding TimeOnlyTime, Mode=TwoWay, Converter={x:StaticResource TimeOnyToTimeSpanConverter}}" />
                        <Label Text="{x:Binding TimeOnlyTime}" />
                    </HorizontalStackLayout>
                    <Label Style="{x:StaticResource DocumentSectionTitleStyle}" Text="TimeOnyToTimeSpanConverter" />
                    <app:SourceCodeExpander Code="{x:Binding TimeOnyToTimeSpanConverterCSharpCode}" CodeType="CSharp" />
                </VerticalStackLayout>
            </Frame>
        </VerticalStackLayout>
    </ScrollView>
</app:BasePage>